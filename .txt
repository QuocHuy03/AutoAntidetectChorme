    def execute_block(block, local_vars):
        nonlocal variables, loop_flags
        action = block.get('action')
        xpath = render(block.get('xpath', ''), local_vars)
        value = render(block.get('value', ''), local_vars)
        try:
                if action == 'open_url':
                    driver.get(value)
                    logger(f"[{profile['name']}] ‚Üí OPEN URL - {value}")

                elif action == 'switch_tab_by_index':
                        tab_index = int(value)
                        tabs = driver.window_handles
                        if 0 <= tab_index < len(tabs):
                            driver.switch_to.window(tabs[tab_index])
                            logger(f"[{profile['name']}] üîÑ Chuy·ªÉn sang tab {tab_index + 1}")
                        else:
                            logger(f"[{profile['name']}] ‚ùå Tab ch·ªâ s·ªë {tab_index} kh√¥ng h·ª£p l·ªá")

                elif action == 'switch_tab_next':
                        tabs = driver.window_handles
                        current_tab = driver.current_window_handle
                        current_index = tabs.index(current_tab)
                        next_index = (current_index + 1) % len(tabs)
                        driver.switch_to.window(tabs[next_index])
                        logger(f"[{profile['name']}] üîÑ Chuy·ªÉn sang tab ti·∫øp theo")

                elif action == 'switch_tab_prev':
                        tabs = driver.window_handles
                        current_tab = driver.current_window_handle
                        current_index = tabs.index(current_tab)
                        prev_index = (current_index - 1) % len(tabs)  # L√πi l·∫°i m·ªôt tab
                        driver.switch_to.window(tabs[prev_index])
                        logger(f"[{profile['name']}] üîÑ Chuy·ªÉn sang tab tr∆∞·ªõc ƒë√≥")

                elif action == 'navigate_back':
                    driver.back()
                    logger(f"[{profile['name']}] ‚¨ÖÔ∏è Quay l·∫°i trang tr∆∞·ªõc")
                
                elif action == 'navigate_forward':
                    driver.forward()
                    logger(f"[{profile['name']}] ‚û°Ô∏è Ti·∫øn t·ªõi trang ti·∫øp theo")
                
                elif action == 'refresh_page':
                    driver.refresh()
                    logger(f"[{profile['name']}] üîÑ T·∫£i l·∫°i trang")

                elif action == 'active_tab':
                    driver.switch_to.window(driver.current_window_handle)
                    logger(f"[{profile['name']}] üîÑ K√≠ch ho·∫°t tab hi·ªán t·∫°i")

                elif action == 'loop':
                    count = int(block.get('count', 1))
                    start = int(block.get('start', 0))
                    var_name = block.get('variable', 'i')
                    loop_blocks = block.get('do', [])
                    for i in range(start, start + count):
                        variables[var_name] = i  # C·∫≠p nh·∫≠t bi·∫øn to√†n c·ª•c
                        loop_vars = variables.copy()  # Thay v√¨ local_vars.copy()
                        loop_flags.append({'break': False, 'continue': False})
                        for lb in loop_blocks:
                            if loop_flags[-1]['break']:
                                break
                            if loop_flags[-1]['continue']:
                                loop_flags[-1]['continue'] = False
                                break
                            execute_block(lb, loop_vars)
                        loop_flags.pop()

                elif action == 'while':
                    condition = block.get('condition')
                    var_name = block.get('variable', 'i')
                    loop_blocks = block.get('do', [])
                    while eval(condition, {}, variables):
                        loop_vars = local_vars.copy()
                        loop_vars.update(variables)
                        loop_flags.append({'break': False, 'continue': False})
                        for lb in loop_blocks:
                            if loop_flags[-1]['break']:
                                break
                            if loop_flags[-1]['continue']:
                                loop_flags[-1]['continue'] = False
                                break
                            execute_block(lb, loop_vars)
                        loop_flags.pop()

                elif action == 'break_loop':
                    if loop_flags:
                        loop_flags[-1]['break'] = True

                elif action == 'next_loop':
                    if loop_flags:
                        loop_flags[-1]['continue'] = True

                elif action == 'set_variable':
                    variables[block['name']] = block['value']

                elif action == 'increase_variable':
                    name = block['name']
                    by = int(block.get('by', 1))
                    variables[name] = variables.get(name, 0) + by

                elif action == 'decrease_variable':
                    name = block['name']
                    by = int(block.get('by', 1))
                    variables[name] = variables.get(name, 0) - by

                elif action == 'input_text':
                    elem = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, xpath)))
                    elem.clear()
                    elem.send_keys(value)
                    logger(f"[{profile['name']}] ‚Üí NH·∫¨P => {xpath} | VALUE = {value}")

                elif action == 'click':
                    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, xpath))).click()
                    logger(f"[{profile['name']}] ‚Üí CLICK => {xpath}")

                elif action == 'click_coords':
                    x, y = map(int, value.strip().split(','))
                    webdriver.ActionChains(driver).move_by_offset(x, y).click().perform()
                    logger(f"[{profile['name']}] üñ±Ô∏è CLICK theo t·ªça ƒë·ªô: ({x}, {y})")
                    webdriver.ActionChains(driver).move_by_offset(-x, -y).perform()

                elif action == 'input_press_key':
                    elem = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, xpath)))
                    key = getattr(Keys, value.upper(), None)
                    if key:
                        elem.click()
                        elem.send_keys(key)
                        logger(f"[{profile['name']}] ‚Üí PRESS KEY {value.upper()} t·∫°i {xpath}")
                    else:
                        logger(f"[{profile['name']}] ‚ùå Ph√≠m kh√¥ng h·ª£p l·ªá: {value}")

                elif action == 'element_exists':
                    elements = driver.find_elements(By.XPATH, xpath)
                    exists = len(elements) > 0
                    logger(f"[{profile['name']}] ‚Üí ELEMENT {'T·ªíN T·∫†I' if exists else 'KH√îNG T·ªíN T·∫†I'} => {xpath}")
                    
                    # N·∫øu ph·∫ßn t·ª≠ t·ªìn t·∫°i, th·ª±c hi·ªán c√°c h√†nh ƒë·ªông trong if_true
                    if exists and 'if_true' in block:
                        for inner in block['if_true']:
                            execute_block(inner, local_vars)
                    
                    # N·∫øu ph·∫ßn t·ª≠ kh√¥ng t·ªìn t·∫°i, th·ª±c hi·ªán c√°c h√†nh ƒë·ªông trong if_false
                    elif not exists and 'if_false' in block:
                        for inner in block['if_false']:
                            execute_block(inner, local_vars)
                    
                    # N·∫øu ph·∫ßn t·ª≠ kh√¥ng t·ªìn t·∫°i v√† stop_on_fail = true, d·ª´ng script
                    if not exists and block.get("stop_on_fail", False):
                        logger(f"[{profile['name']}] üõë D·ª™NG SCRIPT do element kh√¥ng t·ªìn t·∫°i v√† 'stop_on_fail: true'")
                        
                        # G·ªçi API ƒë·ªÉ ƒë√≥ng profile
                        close_profile(provider, base_url, profile['id'])  # ƒê√≥ng profile th√¥ng qua API
                        
                        # ƒê·∫£m b·∫£o ƒë√≥ng tr√¨nh duy·ªát v√† tho√°t kh·ªèi script
                        try:
                            driver.quit()  # ƒê√≥ng tr√¨nh duy·ªát
                        except Exception as e:
                            logger(f"‚ùå L·ªói khi ƒë√≥ng tr√¨nh duy·ªát: {e}")
                        
                        exit()  # D·ª´ng script ho√†n to√†n
                
                elif action == 'upload_file':
                    file_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, xpath)))
                    file_input.send_keys(value)
                    logger(f"[{profile['name']}] üì§ ƒê√£ t·∫£i l√™n file: {value}")

                elif action == 'wait':
                    time.sleep(float(value))
                    logger(f"[{profile['name']}] üïí WAIT {value} gi√¢y")

                elif action == 'switch_iframe':
                    iframe_elem = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, xpath)))
                    driver.switch_to.frame(iframe_elem)
                    logger(f"[{profile['name']}] üîÑ Chuy·ªÉn v√†o iframe v·ªõi xpath: {xpath}")

                elif action == 'switch_to_default_content':
                    driver.switch_to.default_content()
                    logger(f"[{profile['name']}] üîÑ Quay l·∫°i n·ªôi dung ch√≠nh c·ªßa trang")
                
                elif action == 'switch_popup_window':
                    popup_window = driver.window_handles[-1]  # Ch·ªçn c·ª≠a s·ªï popup cu·ªëi c√πng trong danh s√°ch
                    driver.switch_to.window(popup_window)
                    logger(f"[{profile['name']}] üîÑ Chuy·ªÉn sang c·ª≠a s·ªï popup")

                elif action == 'close_popup_window':
                    driver.close()  # ƒê√≥ng c·ª≠a s·ªï popup hi·ªán t·∫°i
                    driver.switch_to.window(driver.window_handles[0])  # Quay l·∫°i c·ª≠a s·ªï ch√≠nh
                    logger(f"[{profile['name']}] üîí ƒê√£ ƒë√≥ng c·ª≠a s·ªï popup")
                    
                elif action == 'scroll':
                    if value == "down":
                        driver.execute_script("window.scrollBy(0, 300);")
                        logger(f"[{profile['name']}] ‚Üì Scroll xu·ªëng 300px")
                    elif value == "up":
                        driver.execute_script("window.scrollBy(0, -300);")
                        logger(f"[{profile['name']}] ‚Üë Scroll l√™n 300px")
                    elif value == "to_bottom":
                        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                        logger(f"[{profile['name']}] ‚Üì Scroll xu·ªëng cu·ªëi trang")
                    elif value == "to_top":
                        driver.execute_script("window.scrollTo(0, 0);")
                        logger(f"[{profile['name']}] ‚Üë Scroll l√™n ƒë·∫ßu trang")
                    elif value == "element":
                        if xpath:
                            elem = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, xpath)))
                            driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", elem)
                            logger(f"[{profile['name']}] üîç Scroll t·ªõi element: {xpath}")
                    elif value == "random":
                        direction = random.choice([-1, 1])
                        pixels = random.randint(100, 600)
                        driver.execute_script(f"window.scrollBy(0, {direction * pixels});")
                        logger(f"[{profile['name']}] üé≤ Scroll ng·∫´u nhi√™n {('‚Üì' if direction == 1 else '‚Üë')} {pixels}px")
                    else:
                        pixels = int(value)
                        driver.execute_script(f"window.scrollBy(0, {pixels});")
                        logger(f"[{profile['name']}] ‚Üï Scroll theo pixel: {pixels}")

                elif action == 'screenshot':
                    os.makedirs('screenshots', exist_ok=True)
                    path = f'screenshots/{profile['name']}_{int(time.time())}.png'
                    driver.save_screenshot(path)
                    logger(f"[{profile['name']}] üì∏ Screenshot l∆∞u t·∫°i: {path}")
                
                elif action == 'eval_script':
                    try:
                        result = driver.execute_script(value)
                        if 'store_as' in block:
                            var_name = block['store_as']
                            variables[var_name] = result
                            logger(f"[{profile['name']}] üß† JS Eval ‚Üí L∆∞u '{var_name}' = {result}")
                        else:
                            logger(f"[{profile['name']}] üß† JS Eval ‚Üí {result}")
                    except Exception as e:
                        logger(f"[{profile['name']}] ‚ùå eval_script l·ªói: {e}")

                elif action == 'stop_script':
                    logger(f"[{profile['name']}] üõë SCRIPT D·ª™NG L·∫†I: {value or block.get('reason', 'Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ')}")
                    close_profile(provider, base_url, profile['id'])
                    driver.quit()
                    exit()

                time.sleep(1)

        except Exception as e:
                logger(f"[{profile['name']}] ‚Üí ‚ùå {action} {xpath} => {e}")
